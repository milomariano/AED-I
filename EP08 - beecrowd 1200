// Código de João Pedro Mariano
#include <stdio.h>
#include <string.h>
#include <stdlib.h>

#define true 1
#define false 0
#define MAXSIZE 100

typedef struct TreeNode {

	char letter;
	struct TreeNode *left;
	struct TreeNode *right;

} TreeNode;

// Funções de travessia em ordem (infixa), pré-ordem (prefixa) e pós-ordem (posfixa)
void inOrderTraversal(TreeNode *);
void preOrderTraversal(TreeNode *);
void postOrderTraversal(TreeNode *);

// Funções para imprimir as sequências de letras em ordem, pré-ordem e pós-ordem
void printInOrder(char *);
void printPreOrder(char *);
void printPostOrder(char *);

// Função para inserir um nó na árvore
TreeNode* push(TreeNode *, char);

// Função para procurar um valor na árvore
_Bool search(TreeNode *, char);

char infixLetters[MAXSIZE] = { 0 };
char postFixLetters[MAXSIZE] = { 0 };
char preFixLetters[MAXSIZE] = { 0 };

int i = 0;
int j = 0;
int k = 0;

void test(TreeNode *node) {

	if (node) {
		test(node->left);
		printf("%c ", node->letter);
		test(node->right);
	}

}

TreeNode* push(TreeNode *node, char letter) {

	if (!node) {

		node = (TreeNode *) malloc(sizeof(TreeNode));
		node->letter = letter;
		node->right = node->left = NULL;

	}
	else if (node->letter > letter)
		node->left = push(node->left, letter);
	else
		node->right = push(node->right, letter);

	return node;

}

_Bool search(TreeNode *node, char letter) {

	_Bool right, left;

	if (!node)
		return false;

	if (node->letter == letter)
		return true;

	if (node->letter > letter)
		left = search(node->left, letter);
	else
		right = search(node->right, letter);

}

void printInOrder(char *letters) {

	int z;
	for (z = 0; z < i; ++z)
		if (!z)
			printf("%c", infixLetters[z]);
		else
			printf(" %c", infixLetters[z]);

	i = 0;
	printf("\n");

}

void printPreOrder(char *letters) {

	int z;
	for (z = 0; z < k; ++z)
		if (!z)
			printf("%c", preFixLetters[z]);
		else
			printf(" %c", preFixLetters[z]);

	k = 0;
	printf("\n");

}

void printPostOrder(char *letters) {

	int z;
	for (z = 0; z < j; ++z)
		if (!z)
			printf("%c", postFixLetters[z]);
		else
			printf(" %c", postFixLetters[z]);

	j = 0;
	printf("\n");

}

void inOrderTraversal(TreeNode *node) {

	if (node) {

		inOrderTraversal(node->left);
		infixLetters[i++] = node->letter;
		inOrderTraversal(node->right);

	}

}

void postOrderTraversal(TreeNode *node) {

	if (node) {

		postOrderTraversal(node->left);
		postOrderTraversal(node->right);
		postFixLetters[j++] = node->letter;

	}

}

void preOrderTraversal(TreeNode *node) {

	if (node) {

		preFixLetters[k++] = node->letter;
		preOrderTraversal(node->left);
		preOrderTraversal(node->right);

	}

}

int main() {

	char command[20], letter;

	TreeNode *root = NULL;
	while (scanf("%s%*c", command) != EOF) {

		if (strcmp(command, "I") == 0) {

			scanf("%c", &letter);
			root = push(root, letter);

		}
		else if (strcmp(command, "INFIXA") == 0)
			inOrderTraversal(root), printInOrder(infixLetters);
		else if (strcmp(command, "PREFIXA") == 0)
			preOrderTraversal(root), printPreOrder(preFixLetters);
		else if (strcmp(command, "P") == 0) {

			scanf("%c", &letter);
			if (search(root, letter))
				printf("%c existe\n", letter);
			else
				printf("%c nao existe\n", letter);

		}
		else
			postOrderTraversal(root), printPostOrder(postFixLetters);

	}

}
