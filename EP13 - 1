//Programa de João Pedro Mariano

#include <stdio.h>
#include <ctype.h>
#include <stdbool.h>
#include <string.h>

typedef struct 
{
	char entradas[201];
} string;

void ordenarparcial(string *dicionario, int tam);
bool buscapalavra(char *, string *, int);
void ordenarinternoparc(string *dicionario, int inicio, int fim);

// Função de procura de uma string no dicionário;
bool buscapalavra(char *str, string *dicionario, int tam)
{
	int i;

	for (i = 0; i < tam; i++)
		if (strcmp(dicionario[i].entradas, str) == 0)
			return true;

	return false;
}

// QuickSort para ordenação em ordem alfabética;
void ordenarinternoparc(string *dicionario, int inicio, int fim)
{
	string pivo;
	string temp;
	int i, j;

	if (fim - inicio > 0)
	{
		if (inicio < fim)
		{
			i = inicio;
			j = fim;
			pivo = dicionario[(i + j) / 2];

			do
			{
				while (strcmp(dicionario[i].entradas, pivo.entradas) < 0)
					i++;
				while (strcmp(dicionario[j].entradas, pivo.entradas) > 0)
					j--;

				if (i <= j)
				{
					temp = dicionario[i];
					dicionario[i] = dicionario[j];
					dicionario[j] = temp;
					i++;
					j--;
				}
			} while (i <= j);

			ordenarinternoparc(dicionario, inicio, j);
			ordenarinternoparc(dicionario, i, fim);
		}
	}
}

//Função recursiva
void ordenarparcial(string *dicionario, int tam)
{
	ordenarinternoparc(dicionario, 0, tam - 1);
}

int main ()
{
	int i, j, k = 0;

	// Vetores que guardar uma string por tempo determinado
	char tempEntrada[201], tempSaida[201];
	// Vetor que guarda as entradas do dicionario
	string dicionario[5050];

	memset(dicionario, 0, sizeof(dicionario));
	while (scanf(" %[^\n]", tempEntrada) != EOF)
	{
		i = j = 0;
		while (tempEntrada[i])
		{
			// Enquanto o caractere na posição atual da string for uma letra;
			// O passe para a string temporária de saída já em minúsculo;
			while (isalpha(tempEntrada[i]))
				tempSaida[j++] = tolower(tempEntrada[i++]);

			// Se o caractere que fez o laço acima sair foi o caractere nulo
			// Significa que a string chegou ao fim
			// Por isso deve-se executar todos os procedimentos de procura e inserção no dicionário;
			// Logo em seguida, quebra-se o laço mais externo;
			if (tempEntrada[i] == '\0')
			{
				tempSaida[j] = '\0';

				if (!buscapalavra(tempSaida, dicionario, k))
					strcpy(dicionario[k++].entradas, tempSaida);

				j = 0;

				memset(tempSaida, 0, sizeof(tempSaida));
				break;
			}

			tempSaida[j] = '\0';

			// printf("Valor de tempSaida: %s\n", tempSaida);
			// Enquanto o caractere atual não for uma letra, apenas avance;
			while (!isalpha(tempEntrada[i]))
			{
				i++;
				// Caso o caractere na posição atual seja o caractere nulo;
				// Significa que a string acabou, pare o laço;
				if (tempEntrada[i] == '\0')
					break;
			}

			// Se a palavra contida na string temporária ainda não existe
			// No struct das strings de saída, então a coloque lá;
			if (!buscapalavra(tempSaida, dicionario, k))
				strcpy(dicionario[k++].entradas, tempSaida);

			j = 0;
			memset(tempSaida, 0, sizeof(tempSaida));
		}

		memset(tempEntrada, 0, sizeof(tempEntrada));
	}

	ordenarparcial(dicionario, k);

	j = 0;
	// Pode haver uma string nula na primeira posição do dicionário, se houver
	// Inicie 'j' de 1;
	if (strcmp(dicionario[0].entradas, "\0") == 0)
		j = 1;

	for (; j < k; j++)
		printf("%s\n", dicionario[j].entradas);
}

