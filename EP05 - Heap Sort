#include <stdio.h>
#include <stdlib.h>
#include <time.h>

void heapify(int arr[], int n, int i) {
    int largest = i;
    int l = 2 * i + 1;
    int r = 2 * i + 2;

    if (l < n && arr[l] > arr[largest]) {
        largest = l;
    }

    if (r < n && arr[r] > arr[largest]) {
        largest = r;
    }

    if (largest != i) {
        int temp = arr[i];
        arr[i] = arr[largest];
        arr[largest] = temp;
        heapify(arr, n, largest);
    }
}

void heap_sort(int arr[], int n) {
    int i;
    for (i = n / 2 - 1; i >= 0; i--) {
        heapify(arr, n, i);
    }

    for (i = n - 1; i > 0; i--) {
        int temp = arr[0];
        arr[0] = arr[i];
        arr[i] = temp;
        heapify(arr, i, 0);
    }
}

int main() {
    int n, i;
    clock_t start_time, end_time;
    double time_used;

    printf("Digite o tamanho do array: ");
    scanf("%d", &n);

    int arr[n];

    // Preenchendo o array com números aleatórios
    for (i = 0; i < n; i++) {
        arr[i] = rand() % 1000;
    }

    start_time = clock(); // marca o tempo de início

    heap_sort(arr, n); // ordena o array

    end_time = clock(); // marca o tempo de término
    time_used = ((double) (end_time - start_time)) / CLOCKS_PER_SEC;

    printf("Array ordenado:\n");
    for (i = 0; i < n; i++) {
        printf("%d ", arr[i]);
    }

    printf("\nTempo de execucao: %lf segundos\n", time_used);

    return 0;
}
